apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
data:
  pyfile: |
    # -*- coding: utf-8 -*-
    from collections import deque
    from datetime import datetime

    def handler(input: dict, context: dict) -> dict:
        """
        Exemplo de função serverless que processa métricas de entrada e calcula estatísticas.
        """
        num_cpus = sum(1 for key in input if key.startswith("cpu_percent-"))
        if "cpu_data" not in context["env"]:
            from collections import deque
            context["env"]["cpu_data"] = {f"cpu_{i}": deque(maxlen=12) for i in range(num_cpus)}

        net_out_total = input.get("net_io_counters_eth0-bytes_sent", 0)
        net_in_total = input.get("net_io_counters_eth0-bytes_recv", 0)
        net_total = net_out_total + net_in_total
        percent_network_egress = (net_out_total / net_total * 100) if net_total else 0

        memory_cached = input.get("virtual_memory-cached", 0)
        memory_buffers = input.get("virtual_memory-buffers", 0)
        memory_total = input.get("virtual_memory-total", 1)
        percent_memory_cached = ((memory_cached + memory_buffers) / memory_total) * 100

        cpu_utilization = {}
        for i in range(num_cpus):
            key = f"cpu_percent-{i}"
            if key in input:
                context["env"]["cpu_data"][f"cpu_{i}"].append(input[key])
                avg_util = sum(context["env"]["cpu_data"][f"cpu_{i}"]) / len(context["env"]["cpu_data"][f"cpu_{i}"])
                cpu_utilization[f"avg-util-{i}-60sec"] = avg_util

        last_updated = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        result = {
            "percent-network-egress": percent_network_egress,
            "percent-memory-cached": percent_memory_cached,
            "last_updated": last_updated,
        }
        result.update(cpu_utilization)
        return result
